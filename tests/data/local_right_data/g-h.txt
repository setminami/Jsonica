usage: jsonica.py generate [-h] [-v] [-i [path/to/inputfile]] [-hr tabsize]
                           [-r [sheetname]] [-o [path/to/outputfile.json]]
                           [-of [(csv | tsv):path/to/outputdir]]

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  -i [path/to/inputfile], --input [path/to/inputfile]
                        Set path/to/input xlsx filename.
  -hr tabsize, --human_readable tabsize
                        set indent size by numeric value, Output humanreadable
                        json files.
  -r [sheetname], --root_sheet [sheetname]
                        set a sheetname in xlsx book have. construct json tree
                        from the sheet as root item. "root" is Default root
                        sheet name.
  -o [path/to/outputfile(.json)], --output [path/to/outputfile(.json)]
                        Output interpreted json. If this set which endswith
                        ".json" as set full filename, output jsonfile treated
                        as the name. But when not set ".json", adopt original
                        xlsx filename, like
                        path/to/outputfile/[source_METAFile_name].json (-o has
                        special filename "-" as STDOUT, and when set like "-o
                        -", all other stdout messages were masked.)
  -of [(csv | tsv):path/to/outputdir], --output_format [(csv | tsv):path/to/outputdir]
                        Output with the format, If you set this, output
                        formfiles to
                        path/to/[source_METAFile_name].xlsx/[sheetname.?sv]s
                        It'll be recommended, if you want to have
                        communication with non Tech team without any
                        gitconfiging.
